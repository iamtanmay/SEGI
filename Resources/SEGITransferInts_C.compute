#pragma kernel CSMain // 0
#pragma kernel CSMain2 // 1
#pragma kernel CSMain3 // 2 - PathTracer cache decoder
#pragma kernel CSMain4 // 3 - PathTracer cache decoder

RWTexture3D<float4> Result;
Texture3D<float4> PrevResult;

Texture3D<uint> RG0;
Texture3D<float4> RG1;

SamplerState _PointClamp;

uint Resolution;
int VoxelAA;

int zStagger;

float4 VoxelOriginDelta;

float4 ClipmapOverlap;

float2 IntToFloats(uint intval)
{
	float value1 = f16tof32(intval);
	float value2 = f16tof32(intval / 0x0000FFFF);
	return float2(value1, value2);
}

float3 hsv2rgb(float3 c)
{
	float4 k = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + k.xyz) * 6.0 - k.www);
	return c.z * lerp(k.xxx, saturate(p - k.xxx), c.y);
}

float4 DecodeRGBAuint(uint value)
{
	uint ai = value & 0x0000007F;
	uint vi = (value / 0x00000080) & 0x000007FF;
	uint si = (value / 0x00040000) & 0x0000007F;
	uint hi = value / 0x02000000;

	float h = float(hi) / 127.0;
	float s = float(si) / 127.0;
	float v = (float(vi) / 2047.0) * 10.0;
	float a = ai * 2.0;

	v = pow(v, 3.0);

	float3 color = hsv2rgb(float3(h, s, v));

	return float4(color.rgb, a);
}

inline float4 EncodeFloatRGBA(float v)
{
	float4 kEncodeMul = float4(1.0, 255.0, 65025.0, 160581375.0);
	float kEncodeBit = 1.0 / 255.0;
	float4 enc = kEncodeMul * v;
	enc = frac(enc);
	enc -= enc.yzww * kEncodeBit;
	return enc;
}

// 9-tap Gaussian filter with linear sampling
// http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/
inline half4 gaussian_filter(float2 stride, uint3 coord)
{
	float4 s = RG1[uint3(coord)] * 0.227027027;

	float2 d1 = stride * 1.3846153846;
	s += RG1[uint3(coord)] * 0.3162162162;
	s += RG1[uint3(coord)] * 0.3162162162;

	float2 d2 = stride * 3.2307692308;
	s += RG1[uint3(coord)] * 0.0702702703;
	s += RG1[uint3(coord)] * 0.0702702703;

	return s;
}

// 0
[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (uint i = 0; i < Resolution; i++)
    {
    	float4 result = float4(0,0,0,0);

		result.rgba = DecodeRGBAuint(RG0[uint3(id.x, id.y, i)]);

		result /= 1 + VoxelAA * 3;

		result.rgb /= max(result.a, 2.0);

		float blockerValue = 0.0;

		if (result.a > 20.0)
		{
			blockerValue = max(0.0, result.a - 20.0);
		}

		result.a = min(result.a, 2.0) * 1.0;
		result.a += blockerValue;

		/*
		uint3 writeCoord = uint3(id.xy, i);

		float3 fcoord = float3((float)id.x / Resolution, (float)id.y / Resolution, (float)i / Resolution);
		float3 refcoord = fcoord * 0.5 + 0.25;
		refcoord += ClipmapOverlap.xyz * 1.0;
		float minCoord = 0.0;
		float maxCoord = 1.0;

		//if (refcoord.x > maxCoord || refcoord.x < minCoord || refcoord.y > maxCoord || refcoord.y < minCoord || refcoord.z > maxCoord || refcoord.z < minCoord)
		*/
		
		/*
		if (id.x == 0 || id.x == Resolution - 1 || id.y == 0 || id.y == Resolution - 1 || i == 0 || i == Resolution - 1)
		{
			//result = float4(0.0, 0.0, 0.0, 0.0);
		}
		*/
		
		Result[uint3(id.xy, i)] = result;

    }
}


// 1
[numthreads(16,16,1)]
void CSMain2 (uint3 id : SV_DispatchThreadID)
{
    for (uint i = 0; i < Resolution; i++)
    {
    	float4 result = float4(0,0,0,0);

		result.rgba = DecodeRGBAuint(RG0[uint3(id.x, id.y, i)]);

		result.rgb /= max(2.0, result.a);

        Result[uint3(id.xy, i)] = result;
    }
}


// 2
[numthreads(16, 16, 1)]
void CSMain3(uint3 id : SV_DispatchThreadID)
{
	for (uint i = 0; i < Resolution; i++)
	{
		Result[uint3(id.xy, i)] = RG1[uint3(id.x, id.y, i)];
	}
}

// 3
[numthreads(16, 16, 1)]
void CSMain4(uint3 id : SV_DispatchThreadID)
{
	uint slice = Resolution / 16;
	uint currentZ;

	for (uint i = 0; i < slice; i++)
	{
		currentZ = zStagger * slice - Resolution + i;
		Result[uint3(id.xy, currentZ)] = gaussian_filter(16, float3(id.xy, currentZ));
	}
}
